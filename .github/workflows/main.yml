name: Deploy

on: 
  workflow_dispatch: 

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActionsSession
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Cache
        uses: actions/cache@v4.1.2
        with: 
          path: |
            **/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}
          
      - name: Install Dependencies
        run: |
          cd ./my-app
          npm install

      - name: Build Next.js App
        run: |
          cd ./my-app
          npm run build

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: "latest"

      - name: Terraform Init
        run: |
          cd ./terraform-config
          terraform init
        env:
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
          TF_VAR_aws_region: ${{ secrets.AWS_REGION}}
          TF_VAR_zone_id: ${{ secrets.ZONE_ID }}

      - name: Terraform
        id: plan
        run: |
          cd ./terraform-config
          terraform plan -out=tfplan
        env:
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
          TF_VAR_aws_region: ${{ secrets.AWS_REGION}}
          TF_VAR_zone_id: ${{ secrets.ZONE_ID }}

      - name: Terraform Apply
        id: apply
        run: |
          cd ./terraform-config
          terraform apply auto-approve tfplan 
        env:
          TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
          TF_VAR_aws_region: ${{ secrets.AWS_REGION}}
          TF_VAR_zone_id: ${{ secrets.ZONE_ID }}

      - name: Upload to s3
        run: |
          S3_BUCKET_NAME=$(terraform -chdir=./terraform-config output -raw s3_bucket_name)
          aws s3 sync ./my-app/out s3://$S3_BUCKET_NAME --delete

      - name: Invalidate CloudFront Cache
        run: |
          DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id)
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
